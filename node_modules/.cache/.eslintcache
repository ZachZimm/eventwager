[{"/home/zach/projects/eventwager/src/index.js":"1","/home/zach/projects/eventwager/src/App.js":"2","/home/zach/projects/eventwager/src/reportWebVitals.js":"3","/home/zach/projects/eventwager/src/abi/abi.js":"4"},{"size":500,"mtime":1626550757183,"results":"5","hashOfConfig":"6"},{"size":12922,"mtime":1627630787197,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1626550757183,"results":"8","hashOfConfig":"6"},{"size":18368,"mtime":1627630680377,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"11olgq2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/zach/projects/eventwager/src/index.js",[],["20","21"],"/home/zach/projects/eventwager/src/App.js",["22","23","24","25","26","27","28","29","30","31","32","33","34"],"import logo from './logo.svg';\nimport React, { useState } from \"react\";\nimport './App.css';\nimport { eventWager } from './abi/abi';\nimport { token } from './abi/abi';\nimport Web3 from \"web3\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// import Home from './home';\n\n// const BigNumber = require('bignumber.js');\nconst web3 = new Web3(Web3.givenProvider);\nconst contractAddress = \"0x3862F68dffed36f78fdDDB043680565ed6ACeEf2\";\nconst tokenAddress = \"0x98bD449b806928733E3a0780d67D1a1c8A0c28Bb\";\nconst eventWagerContract = new web3.eth.Contract(eventWager, contractAddress);\nconst tokenContract = new web3.eth.Contract(token, tokenAddress);\n\nfunction App() {\n  // Getter hooks\n  const [retrievedWager, setRetrievedWager] = useState(0);\n  const [currentPot, setRetrievedCurrentPot] = useState(0);\n  const [potFor, setPotFor] = useState(0);\n  const [potAgainst, setPotAgainst] = useState(0);\n  const [retrievedUserSide, setRetrievedUserSide] = useState(0);\n  const [retrievedSide1, setRetrievedSide1] = useState(\"1\");\n  const [retrievedSide2, setRetrievedSide2] = useState(\"1\");\n  const [requestAddress, setRequestAddress] = useState(0);\n  const [requestAmount, setRequestAmount] = useState(0);\n\n  // Setter hooks\n  const [newWager, setWager] = useState(0);\n  const [userSide, setUserSide] = useState(0);\n  const [winningSide, setWinningSide] = useState(0);\n\n  // Getter methods\n  const getUserWager = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const post = await eventWagerContract.methods.getWager(account).call();\n    const _wager = web3.utils.fromWei(post);\n    setRetrievedWager(_wager);\n  };\n\n  const renderUserWager = async () => {\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const post = await eventWagerContract.methods.getWager(account).call();\n    const _wager = web3.utils.fromWei(post);\n    setRetrievedWager(_wager);\n  };\n\n  const getCurrentPot = async (t) => {\n    t.preventDefault();\n    const post = await eventWagerContract.methods.getPot().call();\n    const _pot = web3.utils.fromWei(post);\n    setRetrievedCurrentPot(_pot);\n  };\n\n  const renderCurrentPot = async () => {\n    const post = await eventWagerContract.methods.getPot().call();\n    const _pot = web3.utils.fromWei(post);\n    setRetrievedCurrentPot(_pot);\n  };\n\n  const getCurrentSides = async (t) => {\n    t.preventDefault();\n    const post = await eventWagerContract.methods.getSides().call();\n    // const post = await eventWagerContract.methods.getPot().call();\n    var substrings = post.split('||&&||');\n    setRetrievedSide1(substrings[0]);\n    setRetrievedSide2(substrings[1]);\n    // return false;\n  };\n\n  const renderSides = async () => { // Same as getCurrentSides, except it takes no context argument\n    const post = await eventWagerContract.methods.getSides().call();\n    var substrings = post.split('||&&||');\n    setRetrievedSide1(substrings[0]);\n    setRetrievedSide2(substrings[1]);\n  };\n\n  const getUserSide = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const post = await eventWagerContract.methods.getUserSide(account).call();\n    setRetrievedUserSide(post);\n  };\n\n  const getPotFor = async (t) => {\n    t.preventDefault();\n    const post = await eventWagerContract.methods.getPotFor().call();\n    setPotFor(post);\n  };\n\n  const renderPotFor = async (t) => {\n    const post = await eventWagerContract.methods.getPotFor().call();\n    setPotFor(post);\n  };\n\n  const getPotAgainst = async (t) => {\n    t.preventDefault();\n    const post = await eventWagerContract.methods.getPotAgainst().call();\n    setPotAgainst(post);\n  };\n\n  const renderPotAgainst = async (t) => {\n    const post = await eventWagerContract.methods.getPotAgainst().call();\n    setPotAgainst(post);\n  };\n  \n\n  // Setter methods\n  const wager = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const _wager = web3.utils.toWei(newWager);\n\n    const gas = await eventWagerContract.methods.wager(userSide, _wager).estimateGas();\n    const post = await eventWagerContract.methods.wager(userSide, _wager).send({ from: account, gas });\n    getUserWager(t);\n    getCurrentPot(t);\n    var form = document.getElementById(\"submitWagerForm\");\n    form.reset();\n  };\n\n  const endRound = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await eventWagerContract.methods.endRound(winningSide).estimateGas();\n    const post = await eventWagerContract.methods.endRound(winningSide).send({ from: account, gas });\n    var form = document.getElementById(\"endRoundForm\");\n    form.reset();\n  };\n\n  const beginRound = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await eventWagerContract.methods.beginRound(retrievedSide1, retrievedSide2).estimateGas();\n    const post = await eventWagerContract.methods.beginRound(retrievedSide1, retrievedSide2).send({ from: account, gas });\n    var form = document.getElementById(\"beginRoundForm\");\n    form.reset();\n  };\n\n  const closeBetting = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = await eventWagerContract.methods.closeBetting().estimateGas();\n    const post = await eventWagerContract.methods.closeBetting().send({from: account, gas });\n    \n  };\n\n  const allowSpend = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    // (2**256)-1)\n    // let amnt = new BigNumber(999 * (10**18));\n    // let _amnt = await amnt.toString();\n    // console.log(_amnt);\n    const gas = tokenContract.methods.approve(contractAddress, web3.utils.toWei('9999')).estimateGas();\n    const post = tokenContract.methods.approve(contractAddress, web3.utils.toWei('9999')).send({ from: account });\n  };\n\n  const requestTokens = async (t) => {\n    t.preventDefault();\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const gas = eventWagerContract.methods.requestTokens(requestAddress, web3.utils.toWei(requestAmount)).estimateGas();\n    const post = eventWagerContract.methods.requestTokens(requestAddress, web3.utils.toWei(requestAmount)).send({ from: account });\n    var form = document.getElementById(\"requestTokensForm\");\n    form.reset();\n  };\n\n  renderSides();\n  renderPotFor();\n  renderPotAgainst();\n  renderCurrentPot();\n  renderUserWager();\n\n  const Home = () => {\n    return(\n      <div className=\"main\">\n      <div className=\"upper\">\n      1: {retrievedSide1} : {potFor} WC<br/> 2: {retrievedSide2} : {potAgainst} WC\n      </div>\n      <div className=\"card\">\n        <form className=\"form\" id=\"submitWagerForm\" onSubmit={wager}>\n          <label>\n            Enter your wager and side:\n            <br />\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"# of WC\"\n              onChange={(t) => setWager(t.target.value)}\n            />\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"side\"\n              placeholder=\"1 or 2\"\n              onChange={(t) => setUserSide(t.target.value)}\n            />\n          </label>\n          <button className=\"button\" type=\"submit\" value=\"Submit\">\n            Submit\n          </button>\n        </form>\n        <br />\n        <div>\n          <button className=\"button\" onClick={getUserWager} type=\"button\">\n            Your current wager: \n          </button>\n            {retrievedWager}\n        </div>\n        <br /> <br />\n        <div>\n          <button className=\"button\" onClick={getCurrentPot} type=\"button\">\n            Click for current pot\n          </button>\n          {currentPot}\n        </div>\n        <br /><br />\n        <div>\n          <button className=\"button\" onClick={allowSpend} type=\"button\">\n              Click to approve\n          </button>\n        </div>\n      <div className=\"lower\">\n        <form className=\"form\" onSubmit={getCurrentSides}>\n          <label>\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Get Sides\n              </button>\n            </label>\n          </form>\n        </div>\n      </div>\n    </div>\n    );\n  }\n\n  const Admin = () => {\n    return(\n      <div className=\"main\">\n      <div className=\"upper\">\n        1: {retrievedSide1} : {potFor} WC<br/> 2: {retrievedSide2} : {potAgainst} WC\n      </div>\n      <div className=\"card\">\n        <form className=\"form\" id=\"submitWagerForm\" onSubmit={wager}>\n          <label>\n            Enter your wager and side:\n            <br />\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"# of WC\"\n              onChange={(t) => setWager(t.target.value)}\n            />\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"side\"\n              placeholder=\"1 or 2\"\n              onChange={(t) => setUserSide(t.target.value)}\n            />\n          </label>\n          <button className=\"button\" type=\"submit\" value=\"Submit\">\n            Submit\n          </button>\n        </form>\n        <br />\n        <div>\n          <button className=\"button\" onClick={getUserWager} type=\"button\">\n            Your current wager: \n          </button>\n            {retrievedWager}\n        </div>\n        <br /> <br />\n        <div>\n          <button className=\"button\" onClick={getCurrentPot} type=\"button\">\n            Click for current pot\n          </button>\n          {currentPot}\n        </div>\n        <br /><br />\n        <div>\n          <button className=\"button\" onClick={allowSpend} type=\"button\">\n              Click to approve\n          </button>\n        </div>\n        <div className=\"lower\">\n          <form className=\"form\" id=\"beginRoundForm\" onSubmit={beginRound}>\n            <label>\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Side 1\"\n                onChange={(t) => setRetrievedSide1(t.target.value)}\n              />\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Side 2\"\n                onChange={(t) => setRetrievedSide2(t.target.value)}\n              />\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Begin Round\n              </button>\n            </label>\n          </form>\n          <form className=\"form\" id=\"endRoundForm\" onSubmit={endRound}>\n          <label>\n            <input\n                className=\"input\"\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Winning Side\"\n                onChange={(t) => setWinningSide(t.target.value)}\n              />\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                End Round\n              </button>\n            </label>\n          </form>\n          <form className=\"form\" id=\"requestTokensForm\" onSubmit={requestTokens}>\n            <label>\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"0x address\"\n                onChange={(t) => setRequestAddress(t.target.value)}\n              />\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Amount\"\n                onChange={(t) => setRequestAmount(t.target.value)}\n              />\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Request Tokens\n              </button>\n            </label>\n          </form>\n      </div>\n      <div className=\"lower\">\n        <form className=\"form\" onSubmit={getCurrentSides}>\n          <label>\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Get Sides\n              </button>\n            </label>\n          </form>\n          <form className=\"form\" onSubmit={closeBetting}>\n            <label>\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Close Betting\n              </button>\n            </label>\n          </form>\n        </div>\n      </div>\n    </div>\n    );\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/admin\">\n          <Admin />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n\n/*\nTODO\nMake a more meaningful top bar 'Side' - Pot \n*/","/home/zach/projects/eventwager/src/reportWebVitals.js",[],"/home/zach/projects/eventwager/src/abi/abi.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":12},{"ruleId":"39","severity":1,"message":"43","line":23,"column":10,"nodeType":"41","messageId":"42","endLine":23,"endColumn":27},{"ruleId":"39","severity":1,"message":"44","line":82,"column":9,"nodeType":"41","messageId":"42","endLine":82,"endColumn":20},{"ruleId":"39","severity":1,"message":"45","line":90,"column":9,"nodeType":"41","messageId":"42","endLine":90,"endColumn":18},{"ruleId":"39","severity":1,"message":"46","line":101,"column":9,"nodeType":"41","messageId":"42","endLine":101,"endColumn":22},{"ruleId":"39","severity":1,"message":"47","line":121,"column":11,"nodeType":"41","messageId":"42","endLine":121,"endColumn":15},{"ruleId":"39","severity":1,"message":"47","line":133,"column":11,"nodeType":"41","messageId":"42","endLine":133,"endColumn":15},{"ruleId":"39","severity":1,"message":"47","line":143,"column":11,"nodeType":"41","messageId":"42","endLine":143,"endColumn":15},{"ruleId":"39","severity":1,"message":"47","line":153,"column":11,"nodeType":"41","messageId":"42","endLine":153,"endColumn":15},{"ruleId":"39","severity":1,"message":"48","line":165,"column":11,"nodeType":"41","messageId":"42","endLine":165,"endColumn":14},{"ruleId":"39","severity":1,"message":"47","line":166,"column":11,"nodeType":"41","messageId":"42","endLine":166,"endColumn":15},{"ruleId":"39","severity":1,"message":"48","line":173,"column":11,"nodeType":"41","messageId":"42","endLine":173,"endColumn":14},{"ruleId":"39","severity":1,"message":"47","line":174,"column":11,"nodeType":"41","messageId":"42","endLine":174,"endColumn":15},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'retrievedUserSide' is assigned a value but never used.","'getUserSide' is assigned a value but never used.","'getPotFor' is assigned a value but never used.","'getPotAgainst' is assigned a value but never used.","'post' is assigned a value but never used.","'gas' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]