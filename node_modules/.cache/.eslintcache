[{"/mnt/h/projects/eventwager/src/index.js":"1","/mnt/h/projects/eventwager/src/reportWebVitals.js":"2","/mnt/h/projects/eventwager/src/App.js":"3","/mnt/h/projects/eventwager/src/abi/abi.js":"4"},{"size":500,"mtime":1631987059433,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1631987059438,"results":"7","hashOfConfig":"6"},{"size":33050,"mtime":1636347354329,"results":"8","hashOfConfig":"6"},{"size":18699,"mtime":1631987059429,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1glj7co",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/h/projects/eventwager/src/index.js",[],"/mnt/h/projects/eventwager/src/reportWebVitals.js",[],"/mnt/h/projects/eventwager/src/App.js",["19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50"],"import React, { useState, useRef } from \"react\";\nimport './App.css';\nimport { eventWager } from './abi/abi';\nimport { token } from './abi/abi';\nimport Web3 from \"web3\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// Images for the French project\nimport caenskyline from './images/caen-skyline.png';\nimport caenmusee from './images/caen-musee.jpeg';\nimport caenchateau from './images/caen-chateau.png';\nimport rouensquare from './images/rouen-square.png';\nimport rouennotredame from './images/rouen-notredame.png';\nimport rouenjardin from './images/rouen-jardin.png';\nimport lehavreskyline from './images/lehavre-skyline.png';\nimport lehavremuma from './images/lehavre-muma2.png';\nimport lehavremarina from './images/lehavre-marina.png';\n\n\nconst web3 = new Web3(Web3.givenProvider);\n// const contractAddress = \"0x73A6Da02A8876C3E01017fB960C912dA0a423817\"; // Ganache\n// const tokenAddress = \"0x02F682030814F5AE7B1b3d69E8202d5870DF933f\"; // Ganache\n// const contractAddress = \"0x011A4e19CE1dC370068869412cd6964f7787B2a7\"; // Ropsten\n// const tokenAddress = \"0x9D14FAaAA23EE94245e256fA834764B6999F42D5\"; // Ropsten\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n }));\n\nfunction App() {\n\n  const classes = useStyles();\n  const [number, setUint] = useState(0);\n  const [getNumber, setGet] = useState(\"0\");\n  \n\n  // Input Refs\n  const side1ref = useRef(null);\n  const side2ref = useRef(null);\n  const adminWagerAmountRef = useRef(null);\n  const adminWagerSideRef = useRef(null);\n  const homeWagerAmountRef = useRef(null);\n  const homeWagerSideRef = useRef(null);\n  const winningSideRef = useRef(null);\n  const requestAddressRef = useRef(null);\n  const requestAmountRef = useRef(null);\n  const changeTokenRef = useState(null)\n  const changeContractRef = useState(null)\n  const homeRadioRef1 = useRef(null);\n  const homeRadioRef2 = useRef(null);\n  const adminRadioRef1 = useRef(null);\n  const adminRadioRef2 = useRef(null);\n\n  // Getter hooks\n  const [retrievedWager, setRetrievedWager] = useState(0);\n  const [currentPot, setRetrievedCurrentPot] = useState(0);\n  const [potFor, setPotFor] = useState(0);\n  const [potAgainst, setPotAgainst] = useState(0);\n  const [retrievedUserSide, setRetrievedUserSide] = useState(0);\n  const [retrievedSide1, setRetrievedSide1] = useState(\"\");\n  const [retrievedSide2, setRetrievedSide2] = useState(\"\");\n  const [requestAddress, setRequestAddress] = useState(0);\n  const [requestAmount, setRequestAmount] = useState(0);\n  const [owner, setOwner] = useState(\"\");\n  const [state, setState] = useState(0);\n  const [tokenAddress, setTokenAddress] = useState(\"0x9D14FAaAA23EE94245e256fA834764B6999F42D5\");\n  const [contractAddress, setContractAddress] = useState(\"0x011A4e19CE1dC370068869412cd6964f7787B2a7\");\n\n  const eventWagerContract = new web3.eth.Contract(eventWager, contractAddress);\n  const tokenContract = new web3.eth.Contract(token, tokenAddress);\n\n  // Setter hooks\n  const [newWager, setWager] = useState(0);\n  const [userSide, setUserSide] = useState(0);\n  const [winningSide, setWinningSide] = useState(0);\n\n  // Getter methods\n  const getUserWager = async (t) => {\n    if(t) { t.preventDefault(); }\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const post = await eventWagerContract.methods.getWager(account).call();\n    const _wager = web3.utils.fromWei(post);\n    setRetrievedWager(_wager);\n  };\n\n  const getState = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getState().call();\n    var _state = state;\n    // if(_state === 'null'){ _state = ''; }\n    // console.log('_state' + _state);\n    // setState(state);\n    setState(post);\n  }\n\n  const getOwner = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getOwner().call();\n    setOwner(post);\n  }\n\n  const getCurrentPot = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getPot().call();\n    const _pot = web3.utils.fromWei(post);\n    setRetrievedCurrentPot(_pot);\n  };\n\n  const getCurrentSides = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getSides().call();\n    // const post = await eventWagerContract.methods.getPot().call();\n    var substrings = post.split('||&&||');\n    setRetrievedSide1(substrings[0]);\n    setRetrievedSide2(substrings[1]);\n    // return false;\n  };\n\n  const getUserSide = async (t) => {\n    if(t) { t.preventDefault(); }\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const post = await eventWagerContract.methods.getUserSide(account).call();\n    setRetrievedUserSide(post);\n  };\n\n  const getPotFor = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getPotFor().call();\n    setPotFor(web3.utils.fromWei(post));\n  };\n\n  const getPotAgainst = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getPotAgainst().call();\n    setPotAgainst(web3.utils.fromWei(post));\n  };\n  \n  // Setter methods\n  const wager = async (t) => {\n    t.preventDefault(); \n    var _amount = homeWagerAmountRef.current.value;\n    var _side;\n    if(homeRadioRef1.current.checked) { _side = 1; }\n    else if(homeRadioRef2.current.checked) { _side = 2; }\n    \n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      console.log('amount : ' + _amount + ' side : ' + _side);\n      const gas = await eventWagerContract.methods.wager(_side, web3.utils.toWei(_amount)).estimateGas({ from: account});\n      console.log(_side);\n      const post = await eventWagerContract.methods.wager(_side, web3.utils.toWei(_amount)).send({ from: account, gas });\n    }\n    catch(e)\n    {\n      // TODO handle the errors.. I can do JSON parse in a try-catch\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n    var form = document.getElementById(\"submitWagerForm\");\n    form.reset();\n  };\n\n  const adminWager = async (t) => {\n    t.preventDefault(); \n    var _amount = adminWagerAmountRef.current.value;\n    var _side;\n    if(homeRadioRef1.current.checked) { _side = 1; }\n    else if(homeRadioRef2.current.checked) { _side = 2; }\n    \n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      console.log('amount : ' + _amount + ' side : ' + _side);\n      const gas = await eventWagerContract.methods.wager(_side, web3.utils.toWei(_amount)).estimateGas({ from: account});\n      console.log(1);\n      const post = await eventWagerContract.methods.wager(_side, web3.utils.toWei(_amount)).send({ from: account, gas });\n      console.log(2);\n    }\n    catch(e)\n    {\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n    var form = document.getElementById(\"submitWagerForm\");\n    form.reset();\n  };\n\n  const endRound = async (t) => {\n    if(t) { t.preventDefault(); }\n    var _winningSide = winningSideRef.current.value;\n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = await eventWagerContract.methods.endRound(_winningSide).estimateGas({ from: account });\n      const post = await eventWagerContract.methods.endRound(_winningSide).send({ from: account, gas });\n    }\n    catch(e)\n    {\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n    var form = document.getElementById(\"endRoundForm\");\n    form.reset();\n  };\n\n  const beginRound = async (t) => {\n    t.preventDefault();\n    setRetrievedSide1(side1ref.current.value);\n    setRetrievedSide2(side2ref.current.value);\n    var _side1 = side1ref.current.value;\n    var _side2 = side2ref.current.value;\n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = await eventWagerContract.methods.beginRound(_side1, _side2).estimateGas({from: account});\n      const post = await eventWagerContract.methods.beginRound(_side1, _side2).send({ from: account, gas });\n    }\n    catch(e)\n    {\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n    var form = document.getElementById(\"beginRoundForm\");\n    form.reset();\n  };\n\n  const closeBetting = async (t) => {\n    t.preventDefault(); \n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = await eventWagerContract.methods.closeBetting().estimateGas({from: account});\n      const post = await eventWagerContract.methods.closeBetting().send({from: account, gas });\n    }\n    catch(e)\n    {\n      // let i = e.message.indexOf('{');\n      // console.log(e.message.substring(i));\n      // let err = JSON.parse(e.message.substring(i).trim()).message;\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n  };\n\n  const allowSpend = async (t) => {\n    t.preventDefault();\n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      console.log('account : ' + account);\n      const gas = tokenContract.methods.approve(contractAddress, web3.utils.toWei('999999')).estimateGas({ from: account });\n      const post = tokenContract.methods.approve(contractAddress, web3.utils.toWei('999999')).send({ from: account });\n      console.log('account_ : ' + account);\n    }\n    catch(e)\n    {\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n  };\n\n  const requestTokens = async (t) => {\n    t.preventDefault();\n    var _requestAddress = requestAddressRef.current.value;\n    var _requestAmount = requestAmountRef.current.value;\n    try {\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = eventWagerContract.methods.requestTokens(_requestAddress, web3.utils.toWei(_requestAmount)).estimateGas({from: account});\n      const post = eventWagerContract.methods.requestTokens(_requestAddress, web3.utils.toWei(_requestAmount)).send({ from: account });\n    }\n    catch(error) {\n      console.log(error);\n      console.log('Error Caught!');\n      alert(error);\n    }\n    \n    var form = document.getElementById(\"requestTokensForm\");\n    form.reset();\n  };\n\n  // Helper methods\n  const networkCheck = async () => { // Check if metamask is connected to Ropsten or Ganache\n    var appNetwork = await web3.eth.net.getNetworkType();\n    let netId = await web3.eth.net.getId();\n    if(appNetwork !== 'ropsten' && netId !== 1627753267457) {\n      alert('Please ensure that your wallet is connected to the Ropsten test network');\n    }\n    // console.log(appNetwork);\n    // console.log(netId);\n  };\n\n  const changeAddress = async (t) => {\n    t.preventDefault();\n    var _contract = changeContractRef.current.value;\n    var _token = changeTokenRef.current.value;\n\n    try{ \n      if(_contract.charAt(1) === 'x') {\n        setContractAddress(_contract);\n    }\n    if(_token.charAt(1) === 'x') \n        setTokenAddress(_token);\n    }\n    catch(e){ alert(e); }\n  };\n\n  const renderValues = async () => {\n    getState();\n    getCurrentSides();\n    getPotFor();\n    getPotAgainst();\n    getCurrentPot();\n    getUserWager();\n    getOwner();\n  };\n\n  const isAbout = async () => {\n    if(window.location.href.includes('about')) { return true; }\n    else { return false; }\n  }\n\n  // Load values from blockchain on page load\n  // if(window.location.href.charAt(window.location.href.length - 1) != 't')\n  if(!isAbout())\n  {\n    networkCheck(); \n    renderValues();\n  }\n\n  // Listener methods\n  eventWagerContract.events.Wager().on('data', (event) => {\n    if(!isAbout())\n    {\n     renderValues();\n    }\n  }).on('error', console.error);\n\n  eventWagerContract.events.RoundStart().on('data', (event) => {\n    if(!isAbout())\n    {\n     renderValues();\n    }\n  }).on('error', console.error);\n\n  eventWagerContract.events.BettingClosed().on('data', (event) => {\n    if(!isAbout())\n    {\n     renderValues();\n    } // TODO this should do something more. The user should be able to tell the state\n  }).on('error', console.error);\n\n  eventWagerContract.events.RoundEnd().on('data', (event) => {\n    if(!isAbout())\n    {\n     renderValues();\n    }\n  }).on('error', console.error);\n\n  eventWagerContract.events.PassOwnership().on('data', (event) => {\n    if(!isAbout())\n    {\n     renderValues();\n    } // TODO This should do something entireley different\n  }).on('error', console.error);\n\n\n  const Home = () => {\n    return(\n      <React.Fragment>\n        <div classname={classes.root}>\n          <div className=\"main\">\n              <div className=\"upper\">\n                <div className=\"upperElement\">\n                  {retrievedSide1} : {potFor} WC<br/>{retrievedSide2} : {potAgainst} WC\n                </div>\n                <div className=\"upperElement\">\n                  State: {state}\n                  <br/>\n                  Your wager: {retrievedWager}\n                </div>\n            </div>\n            <div className=\"potBanner\"> Current pot: {currentPot} </div>\n            <div className=\"card\">\n              <form className=\"form\" id=\"submitWagerForm\" autocomplete=\"off\" onSubmit={wager}>\n                <label>\n                  Enter your wager and side:\n                  <br />\n                  <TextField\n                    inputRef={homeWagerAmountRef}\n                    // ref={homeWagerAmountRef}\n                    id=\"outlined-basic\"\n                    variant=\"outlined\"\n                    className=\"input\"\n                    type=\"text\"\n                    name=\"amount\"\n                    placeholder=\"# of WC\"\n                    // onChange={(t) => setWager(t.target.value)}\n                  />\n                  <RadioGroup className=\"radioGroup\" row name=\"sidegroup\">\n                    <FormControlLabel className=\"radio\" value=\"side1\" control={<Radio />} label={retrievedSide1} inputRef={homeRadioRef1}/>\n                    <FormControlLabel className=\"radio\" value=\"side2\" control={<Radio />} label={retrievedSide2} inputRef={homeRadioRef2}/>\n                  </RadioGroup>\n                </label>\n                <div>\n                  <Button className=\"button\" variant=\"contained\" type=\"submit\" color=\"primary\" value=\"Submit\">\n                    Submit\n                  </Button>\n                </div>\n              </form>\n            <div>\n              <form className=\"form\" id=\"approveForm\" value=\"Submit\">\n                <Button className=\"button\" variant=\"contained\" color=\"secondary\" onClick={allowSpend} type=\"button\">\n                    Click to approve\n                </Button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n    );\n  }\n\n  const Admin = () => {\n    return(\n      <div className=\"main\">\n        <div className=\"upper\">\n            <div className=\"upperElement\">\n              1: {retrievedSide1} : {potFor} WC<br/>2: {retrievedSide2} : {potAgainst} WC\n            </div>\n          <div className=\"upperElement\">\n            State: {state}<br/>Your wager: {retrievedWager}\n          </div>\n        </div>\n        <div className=\"addressBanner\">\n          Owner: {owner}\n        </div>\n        <div className=\"card\">\n          <form className=\"form\" id=\"submitWagerForm\" autocomplete=\"off\" onSubmit={adminWager}>\n            <label>\n              Enter your wager and side:\n              <br />\n              <TextField\n                    inputRef={adminWagerAmountRef}\n                    // ref={homeWagerAmountRef}\n                    id=\"outlined-basic\"\n                    variant=\"outlined\"\n                    className=\"input\"\n                    type=\"text\"\n                    name=\"amount\"\n                    placeholder=\"# of WC\"\n                    // onChange={(t) => setWager(t.target.value)}\n                  />\n                  <RadioGroup className=\"radioGroup\" row name=\"sidegroup\">\n                    <FormControlLabel className=\"radio\" value=\"side1\" control={<Radio />} label={retrievedSide1} inputRef={adminRadioRef1}/>\n                    <FormControlLabel className=\"radio\" value=\"side2\" control={<Radio />} label={retrievedSide2} inputRef={adminRadioRef2}/>\n                  </RadioGroup>\n            </label>\n            <div>\n              <Button className=\"button\" variant=\"contained\" color=\"primary\" type=\"submit\"  value=\"Submit\">\n                Submit\n              </Button>\n            </div>\n          </form>\n          <div>\n              <Button className=\"button\" variant=\"contained\" color=\"secondary\" onClick={allowSpend} type=\"button\">\n                  Click to approve\n              </Button>\n        </div>\n        <div className=\"lower\">\n          <form className=\"form\" id=\"beginRoundForm\" autocomplete=\"off\" onSubmit={beginRound}>\n            <label>\n              <TextField\n                className=\"input\"\n                variant=\"outlined\"\n                inputRef={side1ref}\n                type=\"text\"\n                name=\"name\"\n                // value={retrievedSide1}\n                id=\"side1\"\n                placeholder=\"Side 1\"\n                // onChange={(t) => setRetrievedSide1(t.target.value)}\n              />\n              <TextField\n                className=\"input\"\n                variant=\"outlined\"\n                inputRef={side2ref}\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Side 2\"\n                // value={retrievedSide2}\n                id=\"side2\"\n                // onChange={(t) => setRetrievedSide2(t.target.value)}\n              />\n              <Button className=\"button\" variant=\"outlined\" color=\"primary\" type=\"submit\" value=\"Submit\">\n                Begin Round\n              </Button>\n            </label>\n          </form>\n          <form className=\"form\" id=\"endRoundForm\" autocomplete=\"off\" onSubmit={endRound}>\n          <label>\n            <TextField\n                inputRef={winningSideRef}\n                className=\"input\"\n                variant=\"outlined\"\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Winning Side\"\n                // value={winningSide}\n                // onChange={(t) => setWinningSide(t.target.value)}\n              />\n              <Button className=\"button\" variant=\"outlined\" color=\"primary\" type=\"submit\" value=\"Submit\">\n                End Round\n              </Button>\n            </label>\n          </form>\n          <form className=\"form\" id=\"requestTokensForm\" autocomplete=\"off\" onSubmit={requestTokens}>\n            <label>\n              <TextField\n                inputRef={requestAddressRef}\n                variant=\"outlined\"\n                className=\"input\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"0x address\"\n                // onChange={(t) => setRequestAddress(t.target.value)}\n              />\n              <TextField\n                inputRef={requestAmountRef}\n                variant=\"outlined\"\n                className=\"input\"\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Amount\"\n                // onChange={(t) => setRequestAmount(t.target.value)}\n              />\n              <Button className=\"button\" variant=\"outlined\" color=\"primary\" type=\"submit\" value=\"Submit\">\n                Request Tokens\n              </Button>\n            </label>\n          </form>\n      </div>\n      <div className=\"lower\">\n          <form className=\"form\" onSubmit={closeBetting}>\n            <label>\n              <Button className=\"button\" variant=\"contained\" color=\"secondary\" type=\"submit\" value=\"Submit\">\n                Close Betting\n              </Button>\n            </label>\n          </form>\n        </div>\n      </div>\n    </div>\n    );\n  }\n\n  const ChangeAddress = () => {\n    return(\n      <div className=\"main\">\n        <div className=\"card\">\n          <div>\n            <form className=\"form\" id=\"changeAddressForm\" autocomplete=\"off\" onSubmit={changeAddress}>\n              <label>\n                <div>Token: {tokenAddress}</div><div>Contract: {contractAddress}</div>\n                <br />\n                <TextField\n                  inputRef={changeTokenRef}\n                  className=\"input\"\n                  type=\"text\"\n                  name=\"changeToken\"\n                  placeholder=\"Token 0x address\"\n                />\n                <TextField\n                  inputRef={changeContractRef}\n                  // variant=\"outlined\"\n                  className=\"input\"\n                  type=\"text\"\n                  name=\"changeContract\"\n                  placeholder=\"Contract 0x address\"\n                />\n              </label>\n              <div>\n                <Button className=\"button\" variant=\"contained\" color=\"secondary\" type=\"submit\" value=\"Submit\">\n                  Change Addresses\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const About = () => {\n    return(\n      <div className=\"about\">\n        <label>\n          <h1 className=\"aboutcardheader\">What's this?</h1>\n          <p>It's is an open-source 'decentralized, permissioned prediction market protocol' running on the Ethereum blockchain (?).</p>\n          <p>Users are able to bet against each other on the outcome of a given event (sports game, election, etc). At</p>\n          <p>present, wagers are made with the WC token. And because this token exists on the Ropsten test network, it</p>\n          <p>has no value. The specific token used can be changed fairly easily, but this is sort of a test.</p>\n          <br />\n        </label>\n        <label>\n          <h2 className=\"aboutcardheader\">A peer-to-peer preditction / betting site</h2>\n          <p>First, an event is chosen by an admin (currently only one, but that can change). Once an event is chosen and the</p>\n          <p>sides are established, users are able to place a wager on the side they prefer. Depending on the event, betting may</p>\n          <p>close before a winner is decided. Both sides must have backers or all wagered funds will be returned (I think?).</p>\n          <br />\n          </label>\n        <label>\n          <h2 className=\"aboutcardheader\">Step 1: MetaMask</h2>\n          <p>Install the <a href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\"> MetaMask browser extenstion</a>. It is a cryptocurrency wallet which is capable of interacting with Web3</p>\n          <p>apps (like this site). When you install, it will provide further set up instructions, and while you should save your</p>\n          <p>mnemonic, it won't be too important as long as you're only using the testnet.</p>\n        </label>\n        <label>\n          <h2 className=\"aboutcardheader\">Step 2: Ropsten</h2>\n          <p>This app is currently only deployed to the Ropsten test network chain of Ethereum, which means all crypto tokens</p>\n          <p>(on the test network) have no value. This can be changed without too much difficulty (I mean to change the site, not what follows).</p>\n          <br />\n          <p>To connect to the Ropsten test network, open MetaMask and click 'Ethereum Mainnnet' (between the fox icon and your</p>\n          <p>account icon) and select 'Ropsten Test Network' from the drop down list.</p>\n          <br/>\n        </label>\n        <label>\n          <h2 className=\"aboutcardheader\">Step 3: Acquire WC tokens</h2>\n          <br />\n          <p>???</p>\n          <br />\n        </label>\n        <label>\n          <h2 className=\"aboutcardheader\">Step 4: Wager</h2>\n          <p>Once you \"know\" which side is going to win, you can head over to <a href=\"https://zzimm.com\">zzimm.com</a> and place your wager.</p>\n          <p>If you haven't already, you'll be asked to connect MetaMask to zzimm.com, which you should do. The dashboard shows the 'State'</p>\n          <p>Each side's respective pot, your own wager, and the total pot. State indicates whether an event is active on the site, 0 meaning no,</p>\n          <p>1 being yes. The sides will also appear as 'null' when no event is active (front-end web design is a pain).</p>\n          <br />\n          <p>To place a wager, go to <a href=\"https://zzimm.com\">zzimm.com</a>, ensure an event is active, select your prefered side, enter an</p>\n          <p>amount of WC and click submit!</p>\n          <p>Note: if you have yet to place a wager, you must first click 'APPROVE' before you will be able to do so.</p>\n          <br/>\n        </label>\n        <label>\n          <h2 className=\"aboutcardheader\">Step 5: Winning (hopefully)</h2>\n          <p>When an event finishes, the total pot is split among the users who wagered on the winning side, in according to their proportion of the</p>\n          <p>winning side's pot. If your wager makes up 2/3 of the bets for the winning side, you recieve 2/3 of the total pot. If you bet for the</p>\n          <p>losing side, you win nothing.</p>\n          <br/>\n        </label>\n        <label>\n          <h2 className=\"aboutcardheader\">Blockchain?</h2>\n          <p>To see (but not change lol) the Ethereum addresses for both the contract and token, visit <a href=\"https://zzimm.com/changeaddress\">zzimm.com/changeaddress</a>.</p>\n          <p>The source code can be found at <a href=\"https://github.com/ZachZimm/eventwager\">https://github.com/ZachZimm/eventwager</a>.</p>\n          <br/>\n          <label>\n            <h2 className=\"aboutcardheader\">Permissioned?</h2>\n            <p>It just means that there is a user who has the ability to begin and end events, setting the sides and choosing the winner. This 'governance structure' isn't</p>\n            <p>nessecarily permanent, but as of now the wallet <a href=\"https://ropsten.etherscan.io/address/0xaBc1B66F2787239D6E293C01eC3Aa8186b5FE912\">0xaBc1B66F2787239D6E293C01eC3Aa8186b5FE912</a> owns this smart contract.</p>\n            <br/>\n          </label>\n          <label>\n            <h2 className=\"aboutcardheader\">More?</h2>\n            <p>Probably</p>\n            <p>Oh right, you'll need some testnet ETH as well. You can get that on <a href=\"https://faucet.dimensions.network/\">faucet.dimensions.network</a>, or by asking around.</p>\n            <br/>\n            <br/>\n          </label>\n        </label>\n      </div>\n    )\n  }\n\n  const AboutMeFr = () => {\n    return(\n      <div className=\"about\">\n        <nav class=\"navbar\">\n          <a class=\"brand\" href=\"#\">ZZ</a>\n          <ul>\n            <li>\n              <a href=\"#\">Blog</a>\n            </li>\n            <li>\n              <a href=\"https://zzimm.com/fr/aboutme\">À propos</a>\n            </li>\n            <li>\n              <a href=\"https://zzimm.com\">EventWager</a>\n            </li>\n            <li>\n              <a href=\"https://github.com/zachzimm\">GitHub</a>\n            </li>\n          </ul>\n        </nav>\n        \n        \n        <label>\n          <h1 className=\"aboutcardheader\">À propos de moi</h1>\n          <p>Bonjour! J'mappelle Zach Zimmermann. Je suis un etudiant a l'Université du Nevada à Reno où j'édudie la philosophie et l'informatique.</p>\n          <p>J'adore Plato parce que sa pensée est créative. Il est souvent incompris, mais il y a un attrait pour la connaissaince secrète.</p>\n          <p>J'ai des intérêts dans: marchés de toutes sortes, trading algorithmique, science des données, et blockchain. Mon travail indépendant il y a est à <a href=\"https://www.github.com/ZachZimm/\">github.com/zachzimm</a>.</p>\n          <p>Mon projet le plus récent (provisoirement appelé EventWager) se trouve sur <a href=\"https://zzimm.com/\">zzimm.com</a> et <a href=\"https://zzimm.com/about\">zzimm.com/about</a>, mais MetaMask est requis pour utiliser l'application.</p>\n          <br />\n        </label>  \n      </div>\n    )\n  }\n\n  const TourFr = () => {\n    return(\n      <div className=\"tourmain\">\n        <h1 className=\"tourcardheader\">Un tour en Provence</h1>\n        <h2 className=\"tourcardsubheader\">Caen</h2>\n        <div className=\"tourframe\">\n          <div classname=\"vtourimgframe\">\n            <img \n              className=\"tourimg\"\n              src={caenskyline}\n              alt=\"Caen\"\n            />\n            <div className=\"htourimgframe\">\n              <img \n                className=\"tourimglong\"\n                src={caenmusee}\n                alt=\"Musee de Provence\"\n              />\n              <img\n                className=\"tourimgshort\"\n                src={caenchateau}\n                alt=\"Chateau de Caen\"\n              />\n            </div>\n          </div>\n          <div className=\"tourtext\">\n            <h3>Quand vous arrivez à Caen, vous irez à l’hôtel Mercure.</h3>\n            <h3>Après, vous faites le transport en commun à Château de Caen voir le Musée de Normandie.</h3>\n            <br/>\n            <h3>Ensuite, on admire les paysages en Jardin Botanique de Caen et l'église de la Ste-Trinité.</h3>\n            <br/>\n            <h3>Pour le déjeuner, vous avez À Contre Seus manger tripes à la mode de Caen! Ensuite, vous acheterez un billet de train pour Rouen.</h3>\n            <br />\n          </div>\n        </div>\n        <h2 className=\"tourcardsubheader\">Rouen</h2>\n        <div className=\"tourframe\">\n          <div className=\"tourtext\">\n              <h3>Vous arrivez à Rouen-Rive-Droite. Quand vous le departez, vous irez à la cathédrale Notre-Dame par le réseau.</h3>\n              <h3>Après, vous pouvez visiter le Musée des Beaux-Arts et le Jardin des Plantes. </h3>\n              <br/>\n              <h3>Vous goûtez la cuisine locale à Tandem. Vous mangez le mouton et vous bouvez le cider! Vous dormirez à l'Hôtel de Bourgtheroulde.</h3>\n              <br/>\n              <h3>Ensuite, vous achetez un billet de train pour Le Havre. </h3>\n              <br />\n            </div>\n          <div className=\"vtournimgframe\">\n            <div className=\"htourimgframe\">\n              <img \n                className=\"tourimgshort\"\n                src={rouennotredame}\n                alt=\"Notre Dame de Rouen\"\n              />\n              <img \n                className=\"tourimglong\"\n                src={rouensquare}\n                alt=\"Rouen Square\"\n              />\n            </div>\n            <img \n                // className=\"tourimg\"\n                src={rouenjardin}\n                alt=\"Rouen Jardin\"\n              />\n          </div>\n        </div>\n        <h2 className=\"tourcardsubheader\">Le Havre</h2>\n        <div className=\"tourframe\">\n          <div classname=\"vtourimgframe\">\n            <img \n              className=\"tourimg\"\n              src={lehavreskyline}\n              alt=\"Le Havre\"\n            />\n            <div className=\"htourimgframe\">\n              <img \n                className=\"tourimglonglehavre\"\n                src={lehavremarina}\n                alt=\"Le Havre Marina\"\n              />\n              <img\n                className=\"tourimgshortlehavre\"\n                src={lehavremuma}\n                alt=\"Le Havre Musée d’art Moderne\"\n              />\n            </div>\n          </div>\n          <div className=\"tourtext\">\n            <h3>Bienvenue à Le Havre! Les locales le disent la première ville moderne en France.</h3>\n            <br/>\n            <h3>Vous avez mangé beaucoup de cafés! On admire la ville parce que l’est un site UNESCO.</h3>\n            <br/>\n            <h3> Vous visitez la marina pittoresque et André Masacx musée d’art moderne.</h3>\n            <br/>\n            <h3>Ensuite, vous dormirez à l'hôtel local.</h3>\n            <br/>\n            <h3>Vous parlez de leurs parents et vous leur écrivez une carte postale.</h3>\n            <br />\n          </div>\n        </div>\n        <h2 className=\"tourcardsubheader\">Combien d’argent? 1000€ pour les vacances!</h2>\n        <br/>\n      </div>\n    )\n    // Bigger text, wider images, maybe I'll download and crop them\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/admin\">\n          <Admin />\n        </Route>\n        <Route exact path=\"/changeaddress\">\n          <ChangeAddress />\n        </Route>\n        <Route exact path=\"/about\">\n          <About />\n        </Route>\n        <Route exact path=\"/fr/aboutme\">\n          <AboutMeFr />\n        </Route>\n        <Route exact path=\"/fr/tour\">\n          <TourFr />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n\n/*\nTODO\nMake a more meaningful top bar 'Side' - Pot \n*/","/mnt/h/projects/eventwager/src/abi/abi.js",[],{"ruleId":"51","severity":1,"message":"52","line":9,"column":10,"nodeType":"53","messageId":"54","endLine":9,"endColumn":21},{"ruleId":"51","severity":1,"message":"55","line":9,"column":41,"nodeType":"53","messageId":"54","endLine":9,"endColumn":50},{"ruleId":"51","severity":1,"message":"56","line":40,"column":10,"nodeType":"53","messageId":"54","endLine":40,"endColumn":16},{"ruleId":"51","severity":1,"message":"57","line":40,"column":18,"nodeType":"53","messageId":"54","endLine":40,"endColumn":25},{"ruleId":"51","severity":1,"message":"58","line":41,"column":10,"nodeType":"53","messageId":"54","endLine":41,"endColumn":19},{"ruleId":"51","severity":1,"message":"59","line":41,"column":21,"nodeType":"53","messageId":"54","endLine":41,"endColumn":27},{"ruleId":"51","severity":1,"message":"60","line":48,"column":9,"nodeType":"53","messageId":"54","endLine":48,"endColumn":26},{"ruleId":"51","severity":1,"message":"61","line":50,"column":9,"nodeType":"53","messageId":"54","endLine":50,"endColumn":25},{"ruleId":"51","severity":1,"message":"62","line":66,"column":10,"nodeType":"53","messageId":"54","endLine":66,"endColumn":27},{"ruleId":"51","severity":1,"message":"63","line":69,"column":10,"nodeType":"53","messageId":"54","endLine":69,"endColumn":24},{"ruleId":"51","severity":1,"message":"64","line":69,"column":26,"nodeType":"53","messageId":"54","endLine":69,"endColumn":43},{"ruleId":"51","severity":1,"message":"65","line":70,"column":10,"nodeType":"53","messageId":"54","endLine":70,"endColumn":23},{"ruleId":"51","severity":1,"message":"66","line":70,"column":25,"nodeType":"53","messageId":"54","endLine":70,"endColumn":41},{"ruleId":"51","severity":1,"message":"67","line":80,"column":10,"nodeType":"53","messageId":"54","endLine":80,"endColumn":18},{"ruleId":"51","severity":1,"message":"68","line":80,"column":20,"nodeType":"53","messageId":"54","endLine":80,"endColumn":28},{"ruleId":"51","severity":1,"message":"69","line":81,"column":10,"nodeType":"53","messageId":"54","endLine":81,"endColumn":18},{"ruleId":"51","severity":1,"message":"70","line":81,"column":20,"nodeType":"53","messageId":"54","endLine":81,"endColumn":31},{"ruleId":"51","severity":1,"message":"71","line":82,"column":10,"nodeType":"53","messageId":"54","endLine":82,"endColumn":21},{"ruleId":"51","severity":1,"message":"72","line":82,"column":23,"nodeType":"53","messageId":"54","endLine":82,"endColumn":37},{"ruleId":"51","severity":1,"message":"73","line":97,"column":9,"nodeType":"53","messageId":"54","endLine":97,"endColumn":15},{"ruleId":"51","severity":1,"message":"74","line":127,"column":9,"nodeType":"53","messageId":"54","endLine":127,"endColumn":20},{"ruleId":"51","severity":1,"message":"75","line":161,"column":13,"nodeType":"53","messageId":"54","endLine":161,"endColumn":17},{"ruleId":"51","severity":1,"message":"75","line":185,"column":13,"nodeType":"53","messageId":"54","endLine":185,"endColumn":17},{"ruleId":"51","severity":1,"message":"75","line":203,"column":13,"nodeType":"53","messageId":"54","endLine":203,"endColumn":17},{"ruleId":"51","severity":1,"message":"75","line":223,"column":13,"nodeType":"53","messageId":"54","endLine":223,"endColumn":17},{"ruleId":"51","severity":1,"message":"75","line":239,"column":13,"nodeType":"53","messageId":"54","endLine":239,"endColumn":17},{"ruleId":"51","severity":1,"message":"76","line":256,"column":13,"nodeType":"53","messageId":"54","endLine":256,"endColumn":16},{"ruleId":"51","severity":1,"message":"75","line":257,"column":13,"nodeType":"53","messageId":"54","endLine":257,"endColumn":17},{"ruleId":"51","severity":1,"message":"76","line":273,"column":13,"nodeType":"53","messageId":"54","endLine":273,"endColumn":16},{"ruleId":"51","severity":1,"message":"75","line":274,"column":13,"nodeType":"53","messageId":"54","endLine":274,"endColumn":17},{"ruleId":"77","severity":1,"message":"78","line":684,"column":11,"nodeType":"79","endLine":684,"endColumn":37},{"ruleId":"77","severity":1,"message":"78","line":687,"column":15,"nodeType":"79","endLine":687,"endColumn":27},"no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'FormLabel' is defined but never used.","'number' is assigned a value but never used.","'setUint' is assigned a value but never used.","'getNumber' is assigned a value but never used.","'setGet' is assigned a value but never used.","'adminWagerSideRef' is assigned a value but never used.","'homeWagerSideRef' is assigned a value but never used.","'retrievedUserSide' is assigned a value but never used.","'requestAddress' is assigned a value but never used.","'setRequestAddress' is assigned a value but never used.","'requestAmount' is assigned a value but never used.","'setRequestAmount' is assigned a value but never used.","'newWager' is assigned a value but never used.","'setWager' is assigned a value but never used.","'userSide' is assigned a value but never used.","'setUserSide' is assigned a value but never used.","'winningSide' is assigned a value but never used.","'setWinningSide' is assigned a value but never used.","'_state' is assigned a value but never used.","'getUserSide' is assigned a value but never used.","'post' is assigned a value but never used.","'gas' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]