[{"/home/zach/projects/eventwager/src/index.js":"1","/home/zach/projects/eventwager/src/App.js":"2","/home/zach/projects/eventwager/src/reportWebVitals.js":"3","/home/zach/projects/eventwager/src/abi/abi.js":"4"},{"size":500,"mtime":1626550757183,"results":"5","hashOfConfig":"6"},{"size":16592,"mtime":1627875604706,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1626550757183,"results":"8","hashOfConfig":"6"},{"size":18699,"mtime":1627713041770,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"11olgq2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/home/zach/projects/eventwager/src/index.js",[],["20","21"],"/home/zach/projects/eventwager/src/App.js",["22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"import logo from './logo.svg';\nimport React, { useState, useRef } from \"react\";\nimport './App.css';\nimport { eventWager } from './abi/abi';\nimport { token } from './abi/abi';\nimport Web3 from \"web3\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst web3 = new Web3(Web3.givenProvider);\n// const contractAddress = \"0x73A6Da02A8876C3E01017fB960C912dA0a423817\"; // Ganache\n// const tokenAddress = \"0x02F682030814F5AE7B1b3d69E8202d5870DF933f\"; // Ganache\nconst contractAddress = \"0x011A4e19CE1dC370068869412cd6964f7787B2a7\"; // Ropsten\nconst tokenAddress = \"0x9D14FAaAA23EE94245e256fA834764B6999F42D5\"; // Ropsten\nconst eventWagerContract = new web3.eth.Contract(eventWager, contractAddress);\nconst tokenContract = new web3.eth.Contract(token, tokenAddress);\n\nfunction App() {\n  // Input Refs\n  const side1ref = useRef(null);\n  const side2ref = useRef(null);\n  const amountRef = useRef(null);\n  const sideRef = useRef(null);\n  const winningSideRef = useRef(null);\n  const requestAddressRef = useRef(null);\n  const requestAmountRef = useRef(null);\n\n  // Getter hooks\n  const [retrievedWager, setRetrievedWager] = useState(0);\n  const [currentPot, setRetrievedCurrentPot] = useState(0);\n  const [potFor, setPotFor] = useState(0);\n  const [potAgainst, setPotAgainst] = useState(0);\n  const [retrievedUserSide, setRetrievedUserSide] = useState(0);\n  const [retrievedSide1, setRetrievedSide1] = useState(\"\");\n  const [retrievedSide2, setRetrievedSide2] = useState(\"\");\n  const [requestAddress, setRequestAddress] = useState(0);\n  const [requestAmount, setRequestAmount] = useState(0);\n  const [owner, setOwner] = useState(\"\");\n  const [state, setState] = useState(0);\n\n  // Setter hooks\n  const [newWager, setWager] = useState(0);\n  const [userSide, setUserSide] = useState(0);\n  const [winningSide, setWinningSide] = useState(0);\n\n  // Getter methods\n  const getUserWager = async (t) => {\n    if(t) { t.preventDefault(); }\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const post = await eventWagerContract.methods.getWager(account).call();\n    const _wager = web3.utils.fromWei(post);\n    setRetrievedWager(_wager);\n  };\n\n  const getState = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getState().call();\n    setState(post);\n  }\n\n  const getOwner = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getOwner().call();\n    setOwner(post);\n  }\n\n  const getCurrentPot = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getPot().call();\n    const _pot = web3.utils.fromWei(post);\n    setRetrievedCurrentPot(_pot);\n  };\n\n  const getCurrentSides = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getSides().call();\n    // const post = await eventWagerContract.methods.getPot().call();\n    var substrings = post.split('||&&||');\n    setRetrievedSide1(substrings[0]);\n    setRetrievedSide2(substrings[1]);\n    // return false;\n  };\n\n  const getUserSide = async (t) => {\n    if(t) { t.preventDefault(); }\n    const accounts = await window.ethereum.enable();\n    const account = accounts[0];\n    const post = await eventWagerContract.methods.getUserSide(account).call();\n    setRetrievedUserSide(post);\n  };\n\n  const getPotFor = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getPotFor().call();\n    setPotFor(web3.utils.fromWei(post));\n  };\n\n  const getPotAgainst = async (t) => {\n    if(t) { t.preventDefault(); }\n    const post = await eventWagerContract.methods.getPotAgainst().call();\n    setPotAgainst(web3.utils.fromWei(post));\n  };\n  \n  // Setter methods\n  const wager = async (t) => {\n    t.preventDefault(); \n    var _amount = amountRef.current.value;\n    var _side  = sideRef.current.value;\n    console.log('amountRef : ' + amountRef.current.value);\n    console.log('sideRef : ' + sideRef.current.value);\n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      console.log('amount : ' + _amount + ' side : ' + _side);\n      const gas = await eventWagerContract.methods.wager(_side, web3.utils.toWei(_amount)).estimateGas();\n      console.log(1);\n      const post = await eventWagerContract.methods.wager(_side, web3.utils.toWei(_amount)).send({ from: account, gas });\n      console.log(2);\n      getUserWager(t);\n      getCurrentPot(t);\n    }\n    catch(e)\n    {\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n    var form = document.getElementById(\"submitWagerForm\");\n    form.reset();\n  };\n\n  const endRound = async (t) => {\n    if(t) { t.preventDefault(); }\n    var _winningSide = winningSideRef.current.value;\n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = await eventWagerContract.methods.endRound(_winningSide).estimateGas();\n      const post = await eventWagerContract.methods.endRound(_winningSide).send({ from: account, gas });\n    }\n    catch(e)\n    {\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n    var form = document.getElementById(\"endRoundForm\");\n    form.reset();\n  };\n\n  const beginRound = async (t) => {\n    t.preventDefault();\n    setRetrievedSide1(side1ref.current.value);\n    setRetrievedSide2(side2ref.current.value);\n    var _side1 = side1ref.current.value;\n    var _side2 = side2ref.current.value;\n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = await eventWagerContract.methods.beginRound(_side1, _side2).estimateGas();\n      const post = await eventWagerContract.methods.beginRound(_side1, _side2).send({ from: account, gas });\n    }\n    catch(e)\n    {\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n    var form = document.getElementById(\"beginRoundForm\");\n    form.reset();\n  };\n\n  const closeBetting = async (t) => {\n    t.preventDefault(); \n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = await eventWagerContract.methods.closeBetting().estimateGas();\n      const post = await eventWagerContract.methods.closeBetting().send({from: account, gas });\n    }\n    catch(e)\n    {\n      // let i = e.message.indexOf('{');\n      // console.log(e.message.substring(i));\n      // let err = JSON.parse(e.message.substring(i).trim()).message;\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n  };\n\n  const allowSpend = async (t) => {\n    t.preventDefault();\n    try{\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = tokenContract.methods.approve(contractAddress, web3.utils.toWei('9999')).estimateGas();\n      const post = tokenContract.methods.approve(contractAddress, web3.utils.toWei('9999')).send({ from: account });\n    }\n    catch(e)\n    {\n      alert('Apparently this is the best way to display blockchain errors :/\\n\\n' + e.message);\n    }\n  };\n\n  const requestTokens = async (t) => {\n    t.preventDefault();\n    var _requestAddress = requestAddressRef.current.value;\n    var _requestAmount = requestAmountRef.current.value;\n    try {\n      const accounts = await window.ethereum.enable();\n      const account = accounts[0];\n      const gas = eventWagerContract.methods.requestTokens(_requestAddress, web3.utils.toWei(_requestAmount)).estimateGas();\n      const post = eventWagerContract.methods.requestTokens(_requestAddress, web3.utils.toWei(_requestAmount)).send({ from: account });\n    }\n    catch(error) {\n      console.log(error);\n      console.log('Error Caught!');\n      alert(error);\n    }\n    \n    var form = document.getElementById(\"requestTokensForm\");\n    form.reset();\n  };\n\n  // Helper methods\n  const networkCheck = async () => { // Check if metamask is connected to Ropsten or Ganache\n    var appNetwork = await web3.eth.net.getNetworkType();\n    let netId = await web3.eth.net.getId();\n    if(appNetwork !== 'ropsten' && netId !== 1627753267457) {\n      alert('Please ensure that your wallet is connected to the Ropsten test network');\n    }\n    console.log(appNetwork);\n    console.log(netId);\n  };\n\n  const renderValues = async () => {\n    getState();\n    getCurrentSides();\n    getPotFor();\n    getPotAgainst();\n    getCurrentPot();\n    getUserWager();\n    getOwner();\n  };\n\n  // Load values from blockchain on page load\n  // networkCheck(); TODO re-enable this\n  renderValues();\n\n  // Listener methods\n  eventWagerContract.events.Wager().on('data', (event) => {\n    renderValues();\n  }).on('error', console.error);\n\n  eventWagerContract.events.RoundStart().on('data', (event) => {\n    renderValues();\n  }).on('error', console.error);\n\n  eventWagerContract.events.BettingClosed().on('data', (event) => {\n    renderValues(); // TODO this should do something more. The user should be able to tell the state\n  }).on('error', console.error);\n\n  eventWagerContract.events.RoundEnd().on('data', (event) => {\n    renderValues();\n  }).on('error', console.error);\n\n  eventWagerContract.events.PassOwnership().on('data', (event) => {\n    renderValues(); // TODO This should do something entireley different\n  }).on('error', console.error);\n\n\n  const Home = () => {\n    return(\n      <div className=\"main\">\n        <div className=\"card\">\n          <div className=\"upper\">\n            <div className=\"upperElement\">\n              1: {retrievedSide1} : {potFor} WC<br/> 2: {retrievedSide2} : {potAgainst} WC\n            </div>\n          <div className=\"upperElement\">\n            State: {state}\n          </div>\n        </div>\n        <form className=\"form\" id=\"submitWagerForm\" autocomplete=\"off\" onSubmit={wager}>\n          <label>\n            Enter your wager and side:\n            <br />\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"amount\"\n              placeholder=\"# of WC\"\n              onChange={(t) => setWager(t.target.value)}\n            />\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"side\"\n              placeholder=\"1 or 2\"\n              onChange={(t) => setUserSide(t.target.value)}\n            />\n          </label>\n          <button className=\"button\" type=\"submit\" value=\"Submit\">\n            Submit\n          </button>\n        </form>\n        <br />\n        <div>\n          <button className=\"button\" onClick={getUserWager} type=\"button\">\n            Your current wager: \n          </button>\n            {retrievedWager}\n        </div>\n        <br /> <br />\n        <div>\n          <button className=\"button\" onClick={getCurrentPot} type=\"button\">\n            Click for current pot\n          </button>\n          {currentPot}\n        </div>\n        <br /><br />\n        <div>\n          <button className=\"button\" onClick={allowSpend} type=\"button\">\n              Click to approve\n          </button>\n        </div>\n      <div className=\"lower\">\n        <form className=\"form\" onSubmit={getCurrentSides}>\n          <label>\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Get Sides\n              </button>\n            </label>\n          </form>\n        </div>\n      </div>\n    </div>\n    );\n  }\n\n  const Admin = () => {\n    return(\n      <div className=\"main\">\n        <div className=\"card\">\n          <div className=\"upper\">\n            <div className=\"upperElement\">\n              1: {retrievedSide1} : {potFor} WC<br/> 2: {retrievedSide2} : {potAgainst} WC\n            </div>\n          <div className=\"upperElement\">\n            State: {state}\n            <br/>\n            Owner: {owner}\n          </div>\n        </div>\n        <form className=\"form\" id=\"submitWagerForm\" autocomplete=\"off\" onSubmit={wager}>\n          <label>\n            Enter your wager and side:\n            <br />\n            <input\n              ref={amountRef}\n              className=\"input\"\n              type=\"text\"\n              name=\"amount\"\n              placeholder=\"# of WC\"\n              // value={newWager}\n              // onChange={(t) => setWager(t.target.value)}\n            />\n            <input\n              className=\"input\"\n              ref={sideRef}\n              type=\"text\"\n              name=\"side\"\n              placeholder=\"1 or 2\"\n              // value={userSide}\n              // onChange={(t) => setUserSide(t.target.value)}\n            />\n          </label>\n          <button className=\"button\" type=\"submit\" value=\"Submit\">\n            Submit\n          </button>\n        </form>\n        <br />\n        <div>\n          <button className=\"button\" onClick={getUserWager} type=\"button\">\n            Your current wager: \n          </button>\n            {retrievedWager}\n        </div>\n        <br /> <br />\n        <div>\n          <button className=\"button\" onClick={getCurrentPot} type=\"button\">\n            Click for current pot\n          </button>\n          {currentPot}\n        </div>\n        <br /><br />\n        <div>\n          <button className=\"button\" onClick={allowSpend} type=\"button\">\n              Click to approve\n          </button>\n        </div>\n        <div className=\"lower\">\n          <form className=\"form\" id=\"beginRoundForm\" autocomplete=\"off\" onSubmit={beginRound}>\n            <label>\n              <input\n                className=\"input\"\n                ref={side1ref}\n                type=\"text\"\n                name=\"name\"\n                // value={retrievedSide1}\n                id=\"side1\"\n                placeholder=\"Side 1\"\n                // onChange={(t) => setRetrievedSide1(t.target.value)}\n              />\n              <input\n                className=\"input\"\n                ref={side2ref}\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Side 2\"\n                // value={retrievedSide2}\n                id=\"side2\"\n                // onChange={(t) => setRetrievedSide2(t.target.value)}\n              />\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Begin Round\n              </button>\n            </label>\n          </form>\n          <form className=\"form\" id=\"endRoundForm\" autocomplete=\"off\" onSubmit={endRound}>\n          <label>\n            <input\n                ref={winningSideRef}\n                className=\"input\"\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Winning Side\"\n                // value={winningSide}\n                // onChange={(t) => setWinningSide(t.target.value)}\n              />\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                End Round\n              </button>\n            </label>\n          </form>\n          <form className=\"form\" id=\"requestTokensForm\" autocomplete=\"off\" onSubmit={requestTokens}>\n            <label>\n              <input\n                ref={requestAddressRef}\n                className=\"input\"\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"0x address\"\n                // onChange={(t) => setRequestAddress(t.target.value)}\n              />\n              <input\n                ref={requestAmountRef}\n                className=\"input\"\n                type=\"text\"\n                name=\"side\"\n                placeholder=\"Amount\"\n                // onChange={(t) => setRequestAmount(t.target.value)}\n              />\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Request Tokens\n              </button>\n            </label>\n          </form>\n      </div>\n      <div className=\"lower\">\n        <form className=\"form\" onSubmit={getCurrentSides}>\n          <label>\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Get Sides\n              </button>\n            </label>\n          </form>\n          <form className=\"form\" onSubmit={closeBetting}>\n            <label>\n              <button className=\"button\" type=\"submit\" value=\"Submit\">\n                Close Betting\n              </button>\n            </label>\n          </form>\n        </div>\n      </div>\n    </div>\n    );\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/admin\">\n          <Admin />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n\n/*\nTODO\nMake a more meaningful top bar 'Side' - Pot \n*/","/home/zach/projects/eventwager/src/reportWebVitals.js",[],"/home/zach/projects/eventwager/src/abi/abi.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":12},{"ruleId":"46","severity":1,"message":"50","line":32,"column":10,"nodeType":"48","messageId":"49","endLine":32,"endColumn":27},{"ruleId":"46","severity":1,"message":"51","line":35,"column":10,"nodeType":"48","messageId":"49","endLine":35,"endColumn":24},{"ruleId":"46","severity":1,"message":"52","line":35,"column":26,"nodeType":"48","messageId":"49","endLine":35,"endColumn":43},{"ruleId":"46","severity":1,"message":"53","line":36,"column":10,"nodeType":"48","messageId":"49","endLine":36,"endColumn":23},{"ruleId":"46","severity":1,"message":"54","line":36,"column":25,"nodeType":"48","messageId":"49","endLine":36,"endColumn":41},{"ruleId":"46","severity":1,"message":"55","line":41,"column":10,"nodeType":"48","messageId":"49","endLine":41,"endColumn":18},{"ruleId":"46","severity":1,"message":"56","line":42,"column":10,"nodeType":"48","messageId":"49","endLine":42,"endColumn":18},{"ruleId":"46","severity":1,"message":"57","line":43,"column":10,"nodeType":"48","messageId":"49","endLine":43,"endColumn":21},{"ruleId":"46","severity":1,"message":"58","line":43,"column":23,"nodeType":"48","messageId":"49","endLine":43,"endColumn":37},{"ruleId":"46","severity":1,"message":"59","line":84,"column":9,"nodeType":"48","messageId":"49","endLine":84,"endColumn":20},{"ruleId":"46","severity":1,"message":"60","line":117,"column":13,"nodeType":"48","messageId":"49","endLine":117,"endColumn":17},{"ruleId":"46","severity":1,"message":"60","line":137,"column":13,"nodeType":"48","messageId":"49","endLine":137,"endColumn":17},{"ruleId":"46","severity":1,"message":"60","line":157,"column":13,"nodeType":"48","messageId":"49","endLine":157,"endColumn":17},{"ruleId":"46","severity":1,"message":"60","line":173,"column":13,"nodeType":"48","messageId":"49","endLine":173,"endColumn":17},{"ruleId":"46","severity":1,"message":"61","line":189,"column":13,"nodeType":"48","messageId":"49","endLine":189,"endColumn":16},{"ruleId":"46","severity":1,"message":"60","line":190,"column":13,"nodeType":"48","messageId":"49","endLine":190,"endColumn":17},{"ruleId":"46","severity":1,"message":"61","line":205,"column":13,"nodeType":"48","messageId":"49","endLine":205,"endColumn":16},{"ruleId":"46","severity":1,"message":"60","line":206,"column":13,"nodeType":"48","messageId":"49","endLine":206,"endColumn":17},{"ruleId":"46","severity":1,"message":"62","line":219,"column":9,"nodeType":"48","messageId":"49","endLine":219,"endColumn":21},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'retrievedUserSide' is assigned a value but never used.","'requestAddress' is assigned a value but never used.","'setRequestAddress' is assigned a value but never used.","'requestAmount' is assigned a value but never used.","'setRequestAmount' is assigned a value but never used.","'newWager' is assigned a value but never used.","'userSide' is assigned a value but never used.","'winningSide' is assigned a value but never used.","'setWinningSide' is assigned a value but never used.","'getUserSide' is assigned a value but never used.","'post' is assigned a value but never used.","'gas' is assigned a value but never used.","'networkCheck' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]